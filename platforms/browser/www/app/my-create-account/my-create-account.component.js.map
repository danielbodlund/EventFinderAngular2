{"version":3,"file":"my-create-account.component.js","sourceRoot":"","sources":["../../src/app/my-create-account/my-create-account.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit, Inject} from '@angular/core';\nimport {FirebaseRef, AngularFire, FirebaseListObservable} from 'angularfire2';\nimport {User} from '../IUser';\nimport {Router} from '@angular/router-deprecated';\nimport {MyUsersService} from '../my-users.service'\n\n@Component({\n  moduleId: module.id,\n  selector: 'my-create-account',\n  templateUrl: 'my-create-account.component.html',\n  styleUrls: ['my-create-account.component.css']\n})\nexport class MyCreateAccountComponent implements OnInit {\n\n  email: string = '';\n  password: string = '';\n  username: string = '';  \n  createAnnotation : string = '';\n  \n  constructor(private router: Router, public userService : MyUsersService) {}\n  \n  ngOnInit() {\n       \n  }\n  \n  createAccount() {\n    var self : this;\n    \n    if (this.email !== '' && this.password !== '' && this.username !== '') {\n      \n      var usernameExists: boolean = false;\n      let users = this.userService.usersOnce;\n      \n      // Look if the passwords length is smaller than 5\n      if(this.password.length < 5) {\n        this.createAnnotation = 'Lösenord måste vara mins fem tecken';\n        return;\n      }\n      \n      // Look for spaces\n      for (let i = 0; i < this.password.length; i++) {\n        if(this.password.charAt(i) === ' ') {\n          this.createAnnotation = 'Lösenordet får inte inehålla mellanslag.';\n          return;\n        }\n      }\n      \n      // When we get the user-list callback.\n      users.then(users => {\n        \n        // Parse the user object to an array.\n        let usersAsList = Object.keys(users).map(key => {\n          return users[key];\n        });\n        \n        // Filter the list to only contain users with the same username as the username variable.\n        let arr = usersAsList.filter(value => {\n          return value['username'] == this.username;\n        });      \n        \n        // If the username does not already exist.\n        if(arr.length <= 0) {\n          var createAccountResult = this.userService.createAccount(this.email, this.password);\n          createAccountResult.then(result => {\n          let error = result[\"error\"];\n          let userData = result[\"userData\"];\n          if(error) {\n            switch (error.code) {\n              case \"EMAIL_TAKEN\":\n                this.createAnnotation = 'Kontot kunde inte skapas på grund av att mejladressen redan används.';\n                break;\n              case \"INVALID_EMAIL\":\n                this.createAnnotation = 'Detta är inte en giltlig mail.';\n                break;\n              default:\n                this.createAnnotation = 'Kunde inte skapa användare: ' + error;\n            }\n          } \n          \n          // If there where no errors.\n          else {\n            this.createAnnotation = '';\n            let user : User = { username: this.username,\n                                uid: userData.uid,\n                                events: [''],\n                                firstName: '',\n                                lastName: '',\n                                email: this.email }\n                              \n            this.userService.addUser(userData[\"uid\"], user);\n            this.router.navigate(['/Login']);\n          }}); \n        } \n        \n        // If the username already exist.\n        else {\n          this.createAnnotation = \"Användarnamn finns redan.\";\n          \n        }\n      });              \n    } \n    \n    // If the one or more textfields where empty.\n    else {\n      this.createAnnotation = 'You need to fill all the textfields.'\n    }\n  }\n}\n"]}